Front end ko last ma lekhne

private void userLogIn() {
		// On click of the log In button
		// It fetch the data from the field
		// Create an object of Service Layer and pass the model to Service layer
		// Perform the required action from the Service layer.
		try {
			Users user = new Users();
			user.setUserName(liUserNameTextField.getText());
			user.setPassword(String.valueOf(liPasswordPassField.getPassword()));
			
			
			UserServiceLayer userSL = new UserServiceLayer();
			userSL.ValidateLogIn(user);
			userSL.userLogIn(user);
			
			
		}
		catch(InputException ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage());
		}
		catch(Exception ex) {
			JOptionPane.showMessageDialog(null, ex.getMessage());
		}
			
service layer ko tala validate function banaune 

public boolean ValidateLogIn(Users user) throws InputException {
		
		if(user.getUserName() == null || user.getUserName().length() == 0) {
			throw new InputException("User name cannot be empty.");
		}
		if(user.getPassword() == null || user.getPassword().length() == 0) {
			throw new InputException("Password cannot be empty.");
		}
		
		return true;
	}



business layer ma arko function data base ma falna ko lagi

public Users userLogIn(Users user) throws Exception {
		//this fuction get the user detail to log in
		try {
			UserDatabaseLayer userDatabaseLayer = new UserDatabaseLayer(user);
			return userDatabaseLayer.userLogIn();
		} catch (Exception e) {
			throw e;
		}
	}



Database layer ma hanne code admin ra customer duitai xuttaune xa

public class UserDatabaseLayer {

	public static int primkey = 0;
	private Users user;
	private DatabaseConnector db;
	private Connection connection;
	
	public UserDatabaseLayer() {
		this.user = new Users();
	}
	
	public UserDatabaseLayer(Users user) throws Exception {
		this.user = user;
		try{
		this.db = DatabaseConnector.getInstance();
		this.connection = this.db.getConnection();
		}catch (Exception ex) {
			throw ex;
		}
	}

	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}
	
	
	//user login method
	
	public Users userLogIn() throws Exception {
		
		PreparedStatement customerStatement;
		PreparedStatement adminStatement;
		ResultSet crs;
		ResultSet ars;
		
		
		//getting email and password from the login page
		
		// query to check if the username and password exist in data base or not
		
		String customerQuery = "SELECT * FROM Users WHERE userName = ? AND password = ? AND userType is NULL  ";
		String adminQuery = "SELECT * FROM Users WHERE userName = ? AND password = ? AND userType = 'receptionist' ";
		
		try {
			
			customerStatement = this.connection.prepareStatement(customerQuery);
			customerStatement.setString(1, this.user.getUserName());
			customerStatement.setString(2, this.user.getPassword());
			
			
			adminStatement = this.connection.prepareStatement(adminQuery);
			adminStatement.setString(1, this.user.getUserName());
			adminStatement.setString(2, this.user.getPassword());
			
			
			
			crs = customerStatement.executeQuery();
			ars = adminStatement.executeQuery();
			
			//condition if the username and password match
			if (crs.next())
			{
				//take user to user home page
				UserHomePage homePage = new UserHomePage();
				homePage.setVisible(true);
				homePage.pack();
				homePage.setLocationRelativeTo(null);
			}
			
			else if (ars.next())
			{
				//take user to user home page
				AdminPage adminPage = new AdminPage();
				adminPage.setVisible(true);
				adminPage.pack();
				adminPage.setLocationRelativeTo(null);
			}
			else {
				JOptionPane.showMessageDialog(null, "Invalid User name password", "Log In Error", 2);
			}
			
			
		}catch(Exception ex) {
			throw ex;
		}
		
		
		return user;
	} 
